[["index.html", "AlberdiLab | Sled dogs metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Sled dogs metagenomics Elsa Margaret Krook Brenner1 Ostaizka Aizpurua2 Antton Alberdi3 2024-05-29 Chapter 1 Introduction This webbook contains all the code used for data analysis in study on the recovery of metagenome‑assembled genomes and derived microbial communities from faecal samples of sled dogs collected in Daneborg and Ittoqqortoormii. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/sled_dogs_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) library(janitor) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(matrixStats) University of Copenhagen, elsa.brenner@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Prepare a phyloseq object 2.5 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0032_metadata.tsv&quot;)%&gt;% dplyr::rename(sample=EHI_plaintext) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0032_counts.tsv&quot;) %&gt;% rename(genome=1)%&gt;% select(c(&quot;genome&quot;,sample_metadata$sample)) 2.1.3 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/DMB0032_coverage.tsv&quot;) %&gt;% rename(genome=1) %&gt;% select(c(&quot;genome&quot;,sample_metadata$sample)) 2.1.4 Genome metadata genome_metadata &lt;- read_tsv(&quot;data/DMB0032_mag_info.tsv&quot;)%&gt;% rename(length=mag_size) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0032.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/sled_dogs_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) genome_counts_filt &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] rownames(genome_counts_filt) &lt;- NULL genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Prepare a phyloseq object phylo_samples &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% sample_data() #convert to phyloseq sample_data object phylo_genome &lt;- genome_counts_filt %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% otu_table(., taxa_are_rows = TRUE) phylo_taxonomy &lt;- genome_metadata %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% as.matrix() %&gt;% tax_table() #convert to phyloseq tax_table object physeq_genome &lt;- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples) physeq_genome_clr &lt;- microbiome::transform(physeq_genome, &#39;clr&#39;) 2.5 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, physeq_genome, physeq_genome_clr, file = &quot;data/data.Rdata&quot;) "],["data-pre-processing.html", "Chapter 3 Data pre-processing 3.1 General data statistics 3.2 General MAG statistics", " Chapter 3 Data pre-processing 3.1 General data statistics Number of samples 58 Number of MAGs: The number of metagenome-assembled genomes (MAG) or draft bacterial genomes reconstructed from the metagenomic data. 555 Amount of total data (GB): The amount of total DNA data sequenced in gigabases (GB, one billion nucleotide bases). 333.71 Amount of discarded data (GB): The amount of data discarded due to low quality or lack of informativeness during data preprocesing. Discarding 5-15% of the produced data is within the expected range, due to formation of adaptor dimers, inclusion of adaptors in sequencing reads due to short insert sizes, low sequencing quality, etc. 10.36577 Amount of discarded data (in % of the raw data) 3.11 Amount of host data (GB): The amount of data mapped against the host genome. The percentage refers to the amount of data mapped to the host genome respect to quality-filtered data. Note that this value can be very variable depending on the biological features of the sample (e.g., anal swabs contain more host DNA than faeces) and the employed reference genome (e.g., the chances for mapping to the genome are lower as the distance between) the study species and the employed reference genome differ). 6.488333 Amount of host data (% of the quality-filtered data) 2.01 Estimated prokaryotic data: The amount and proportion of data belonging to prokayotic genomes respect to the total metagenomic fraction, as estimated from singleM analysis. Note that this is an estimation that relies on the genome sizes of genomes available in reference databases. If a given taxon is not properly represented, genome size estimations can be less accurate. 293.1353 Estimated prokaryotic data (% of the metagenomic data): 293.1353 Amount of metagenomic data (GB): The amount of data mapped against the host genome. The percentage refers to the amount of data mapped to the host genome respect to quality-filtered data. Note that this value can be very variable depending on the biological features of the sample (e.g., anal swabs contain more host DNA than faeces) and the employed reference genome (e.g., the chances for mapping to the genome are lower as the distance between) the study species and the employed reference genome differ). 316.8527 Amount of metagenomic data (% of the quality-filtered data): 97.99 Total mapped sequencing depth (million reads): The amount of reads (and nucleotide bases) that were mapped to the entire MAG catalogue. Note that the amount of bases is only an approximation estimated by multiplying the exact number of mapped reads by 250 bp. 1860.26 Total mapped sequencing depth (GB) 266.02 Average mapped sequencing depth (million reads): This is the average number of reads (and nucleotide bases) mapped to each sample. Note that the amount of bases is only an approximation estimated by multiplying the exact number of mapped reads by 250 bp. 32.07 Average mapped sequencing depth (GB) 4.59 3.2 General MAG statistics Number of MAGs without species-level annotation 244 Percentage of MAGs without species-level annotation 43.96396 Number of phyla 12 "],["sequencing-assessment.html", "Chapter 4 Sequencing Assessment 4.1 DNA fractions 4.2 Estimated vs. mapped prokaryotic fraction", " Chapter 4 Sequencing Assessment 4.1 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases) mags_bases_mean &lt;- sequence_fractions %&gt;% mutate(mags_bases = mags_bases / 1000000000) %&gt;% select(mags_bases) %&gt;% pull() %&gt;% mean() sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(values=c(&quot;#CCCCCC&quot;,&quot;#178a94&quot;,&quot;#ee8080&quot;,&quot;#d03161&quot;)) + geom_hline(yintercept = mags_bases_mean, linetype = &quot;dashed&quot;, color = &quot;black&quot;) + labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 4.2 Estimated vs. mapped prokaryotic fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify 4.2.1 Additional sequencing needed # Define the aimed GBs for host and mapped metagenomic data mags_bases_aim=2 host_bases_aim=5 sequence_fractions_required &lt;- sequence_fractions %&gt;% mutate(mags_bases = round(mags_bases / 1000000000,2)) %&gt;% mutate(unmapped_bases = round(unmapped_bases / 1000000000,2)) %&gt;% mutate(host_bases = round(host_bases / 1000000000,2)) %&gt;% mutate(lowqual_bases = round(lowqual_bases / 1000000000,2)) %&gt;% mutate(total_bases = mags_bases+unmapped_bases+host_bases+lowqual_bases) %&gt;% mutate(mags_bases_fraction = mags_bases/total_bases) %&gt;% mutate(mags_bases_difference = mags_bases_aim - mags_bases) %&gt;% mutate(meta_required = round(mags_bases_difference / mags_bases_fraction,2)) %&gt;% mutate(meta_required = ifelse(meta_required &lt; 0, 0, meta_required)) %&gt;% mutate(host_bases_fraction = host_bases/total_bases) %&gt;% mutate(host_bases_difference = host_bases_aim - host_bases) %&gt;% mutate(host_required = round(host_bases_difference / host_bases_fraction,2)) %&gt;% mutate(host_required = ifelse(host_required &lt; 0, 0, host_required)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases,meta_required,host_required) sequence_fractions_required %&gt;% select(sample,meta_required,host_required) %&gt;% mutate(meta_required = ifelse(meta_required &gt; 20, 21, meta_required)) %&gt;% mutate(host_required = ifelse(host_required &gt; 20, 21, host_required)) %&gt;% pivot_longer(!sample, names_to = &quot;requirement&quot;, values_to = &quot;value&quot;) %&gt;% mutate(requirement = factor(requirement, levels = c(&quot;host_required&quot;,&quot;meta_required&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, fill=requirement, group=requirement)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(values=c(&quot;#178a94&quot;,&quot;#d03161&quot;)) + facet_wrap(~requirement, scales=&quot;free_x&quot;) + labs(x = &quot;Amount of data (GB)&quot;, y = &quot;Samples&quot;) + geom_vline(xintercept = 20, linetype = &quot;dashed&quot;, color = &quot;black&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) "],["mag-catalogue.html", "Chapter 5 MAG catalogue 5.1 Genome phylogeny 5.2 Genome quality 5.3 Functional overview 5.4 Functional ordination", " Chapter 5 MAG catalogue load(&quot;data/data.Rdata&quot;) 5.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 5.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() tinytable_suw9lcqhmu1nodavrwwv .table td.tinytable_css_ek9xo114m8qeljxanb4u, .table th.tinytable_css_ek9xo114m8qeljxanb4u { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 78.18±17.34 2.78±2.84 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(70,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(70,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 5.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 5.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 6 Community composition 6.1 Taxonomy overview 6.2 Taxonomy boxplot", " Chapter 6 Community composition load(&quot;data/data.Rdata&quot;) 6.1 Taxonomy overview 6.1.1 Stacked barplot genome_metadata&lt;- genome_metadata%&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors)+ facet_grid(~region, scale=&quot;free&quot;, space=&quot;free&quot;) + guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 6.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_nunxqe86j17ytq62su1x .table td.tinytable_css_u7ndenal8k2kqf2t4g6p, .table th.tinytable_css_u7ndenal8k2kqf2t4g6p { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd Bacteroidota 0.4035989436 0.145467610 Fusobacteriota 0.2524757044 0.116738961 Bacillota_A 0.1569779500 0.083006580 Pseudomonadota 0.1102730723 0.091046930 Bacillota 0.0325629996 0.047546126 Bacillota_C 0.0258155713 0.030445893 Campylobacterota 0.0053179332 0.008379673 Actinomycetota 0.0052739897 0.007053559 Deferribacterota 0.0040560203 0.006214013 Bacillota_B 0.0023438584 0.006878646 Spirochaetota 0.0009585895 0.002398975 Desulfobacterota 0.0003453677 0.001015241 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 6.1.3 Phylum percentages by site Daneborg dogs tinytable_q8ujkk7o2mzo6ooq48pa .table td.tinytable_css_r48axjgl0w7zpq42yski, .table th.tinytable_css_r48axjgl0w7zpq42yski { border-bottom: solid 0.1em #d3d8dc; } Phylum mean sd Bacteroidota 47.42647071 12.41051445 Fusobacteriota 26.44829722 8.85569343 Bacillota_A 11.78407839 5.26808838 Pseudomonadota 9.30642610 4.09486152 Bacillota 2.01995216 1.12909691 Bacillota_C 1.82946040 0.79964496 Deferribacterota 0.44065871 0.47755553 Actinomycetota 0.33862019 0.58878812 Campylobacterota 0.21681726 0.42039106 Spirochaetota 0.07390032 0.12704418 Desulfobacterota 0.06907354 0.13605743 Bacillota_B 0.04624502 0.09256777 Ittoqqortoormii dogs tinytable_nr5uf86exah1cmh7c4qe .table td.tinytable_css_8vm6llcpnlixtxmtrvo9, .table th.tinytable_css_8vm6llcpnlixtxmtrvo9 { border-bottom: solid 0.1em #d3d8dc; } Phylum mean sd Bacteroidota 33.2933180 13.1648465 Fusobacteriota 24.0468437 14.0006093 Bacillota_A 19.6115116 8.9878472 Pseudomonadota 12.7481884 12.0768015 Bacillota 4.4926478 6.4481701 Bacillota_C 3.3336539 4.1302504 Campylobacterota 0.8467694 1.0233386 Actinomycetota 0.7161777 0.7696304 Bacillota_B 0.4225267 0.9387879 Deferribacterota 0.3705454 0.7452951 Spirochaetota 0.1178176 0.3162563 6.2 Taxonomy boxplot 6.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_26x23jpnqo7ebkbxbg1o .table td.tinytable_css_fvv6j2nwbssfeavh4kyq, .table th.tinytable_css_fvv6j2nwbssfeavh4kyq { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Bacteroidaceae 3.967680e-01 1.500812e-01 f__Fusobacteriaceae 2.524757e-01 1.167390e-01 f__Lachnospiraceae 6.937163e-02 5.162657e-02 f__Succinivibrionaceae 4.514358e-02 4.599230e-02 f__Burkholderiaceae_A 3.599256e-02 1.658700e-02 f__Ruminococcaceae 3.000129e-02 2.083510e-02 f__Enterobacteriaceae 2.893626e-02 8.003545e-02 f__Peptostreptococcaceae 2.580817e-02 2.802819e-02 f__Clostridiaceae 1.944158e-02 3.937397e-02 f__Acidaminococcaceae 1.755676e-02 8.366470e-03 f__Selenomonadaceae 8.258810e-03 3.029587e-02 f__Erysipelotrichaceae 6.992056e-03 8.757741e-03 f__Anaeroplasmataceae 6.453126e-03 9.215863e-03 f__Lactobacillaceae 6.211658e-03 3.296719e-02 f__Turicibacteraceae 4.883145e-03 1.619002e-02 f__Coriobacteriaceae 4.215944e-03 6.053805e-03 f__Mucispirillaceae 4.056020e-03 6.214013e-03 f__Helicobacteraceae 3.509401e-03 5.952573e-03 f__Enterococcaceae 3.123536e-03 2.247890e-02 f__Oscillospiraceae 3.086101e-03 5.295318e-03 f__Butyricicoccaceae 2.721653e-03 3.113349e-03 f__Muribaculaceae 2.608256e-03 6.651236e-03 f__Peptococcaceae 2.343858e-03 6.878646e-03 f__CAG-508 2.325013e-03 1.995239e-03 f__Streptococcaceae 2.313326e-03 7.004722e-03 f__Coprobacillaceae 2.183605e-03 3.762140e-03 f__Anaerotignaceae 2.105212e-03 3.582049e-03 f__Tannerellaceae 1.883546e-03 4.440356e-03 f__Campylobacteraceae 1.808532e-03 5.010135e-03 f__Marinifilaceae 1.500172e-03 5.097462e-03 f__Brachyspiraceae 9.585895e-04 2.398975e-03 f__UBA932 8.389653e-04 2.555016e-03 f__CAG-274 8.267501e-04 1.348617e-03 f__Eggerthellaceae 8.159672e-04 1.624225e-03 f__Cellulosilyticaceae 4.732449e-04 1.929303e-03 f__Desulfovibrionaceae 3.453677e-04 1.015241e-03 f__Anaerovoracaceae 3.247569e-04 7.467800e-04 f__CAG-826 2.912959e-04 5.753363e-04 f__Bifidobacteriaceae 2.420788e-04 1.807747e-03 f__Peptoniphilaceae 2.413738e-04 8.768049e-04 f__JAAYXM01 1.716132e-04 6.218848e-04 f__Beijerinckiaceae 1.585673e-04 1.207613e-03 f__Mycoplasmoidaceae 6.465891e-05 3.399451e-04 f__Burkholderiaceae_C 4.210337e-05 2.455972e-04 f__ 3.978316e-05 1.733718e-04 f__Acutalibacteraceae 3.977628e-05 2.255595e-04 f__UBA3375 2.708135e-05 9.892183e-05 f__Catellicoccaceae 1.951115e-05 1.485925e-04 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per region family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~region)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 6.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_78l8680vrup0wkiz1pav .table td.tinytable_css_oosu7xwltwuyxfbjn9nv, .table th.tinytable_css_oosu7xwltwuyxfbjn9nv { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Phocaeicola 2.276024e-01 1.030967e-01 Fusobacterium_A 1.344294e-01 9.447745e-02 Fusobacterium_B 9.108268e-02 4.487667e-02 Bacteroides 5.732156e-02 3.278054e-02 Alloprevotella 4.766166e-02 5.549928e-02 Anaerobiospirillum 4.414681e-02 4.592350e-02 Mediterranea 3.741307e-02 2.702094e-02 Sutterella 3.103683e-02 1.516295e-02 Escherichia 2.807037e-02 7.932913e-02 Faecalibacterium 2.340600e-02 1.733790e-02 Prevotella 2.018810e-02 4.308974e-02 Phascolarctobacterium_A 1.755676e-02 8.366470e-03 Blautia 1.618063e-02 1.813142e-02 Peptacetobacter 1.394900e-02 1.201021e-02 Sarcina 1.139524e-02 2.964173e-02 Ruminococcus_B 1.063530e-02 1.750319e-02 Faecalimonas 9.226381e-03 1.329828e-02 Cetobacterium_A 8.844355e-03 4.284187e-02 Megamonas 8.258810e-03 3.029587e-02 Blautia_A 7.895308e-03 7.135310e-03 Peptostreptococcus 7.383090e-03 2.411080e-02 CALUXS01 6.453126e-03 9.215863e-03 Schaedlerella 5.844351e-03 8.304399e-03 Paraprevotella 5.729017e-03 1.173181e-02 Turicibacter 4.883145e-03 1.619002e-02 Aphodousia 4.280159e-03 5.412066e-03 Collinsella 4.215944e-03 6.053805e-03 Clostridium 4.215383e-03 8.849574e-03 Eisenbergiella 4.127377e-03 4.150112e-03 Fournierella 3.810018e-03 3.680947e-03 Enterococcus_B 3.058641e-03 2.248437e-02 Mucispirillum 3.010977e-03 5.847022e-03 Lactobacillus 2.930739e-03 1.570378e-02 Ligilactobacillus 2.808046e-03 1.582268e-02 Butyricicoccus 2.721653e-03 3.113349e-03 Allobaculum 2.644001e-03 2.977452e-03 Ventrimonas 2.628617e-03 5.341587e-03 Limisoma 2.608256e-03 6.651236e-03 GCA-900066495 2.535003e-03 7.209322e-03 Enterocloster 2.428325e-03 2.738649e-03 UMGS1590 2.343858e-03 6.878646e-03 CAJMNU01 2.244379e-03 3.136201e-03 Faecousia 2.101022e-03 3.902371e-03 Avimicrobium 1.978521e-03 1.756834e-03 Parabacteroides 1.883546e-03 4.440356e-03 Campylobacter_D 1.808532e-03 5.010135e-03 Helicobacter_A 1.686258e-03 5.099817e-03 Merdicola 1.623972e-03 1.133414e-03 Lachnospira 1.574311e-03 3.698223e-03 Odoribacter 1.500172e-03 5.097462e-03 Clostridium_H 1.301880e-03 4.013538e-03 Lactococcus 1.258562e-03 5.625124e-03 JAHHTG01 1.213503e-03 6.635896e-03 Roseburia 1.209379e-03 5.131904e-03 Anaerotignum 1.107741e-03 1.705435e-03 Mediterraneibacter 1.062241e-03 6.028260e-03 Streptococcus 1.054765e-03 4.437524e-03 Holdemanella 1.006879e-03 2.085413e-03 Romboutsia_C 9.837030e-04 6.124611e-03 Brachyspira 9.585895e-04 2.398975e-03 Anaerobiospirillum_A 9.429832e-04 2.289970e-03 Fimicola 8.751261e-04 3.276954e-03 Klebsiella 8.658896e-04 4.763963e-03 Clostridium_Q 8.577680e-04 1.636674e-03 Phocaeicola_A 8.521991e-04 2.195967e-03 Cryptobacteroides 8.389653e-04 2.555016e-03 Slackia_A 8.159672e-04 1.624225e-03 Hungatella_A 8.124222e-04 1.814413e-03 Dwaynesavagella 8.116830e-04 3.414155e-03 CALVGN01 8.096684e-04 1.171787e-03 Clostridium_J 7.756410e-04 2.354818e-03 Gallispira 7.671477e-04 1.302383e-03 Avilachnospira 7.595761e-04 1.773406e-03 Copromonas 7.399478e-04 1.481977e-03 CAG-269 7.010411e-04 1.856952e-03 Faecalibacillus 6.819025e-04 3.505549e-03 Parasutterella 6.122753e-04 4.662950e-03 Helicobacter_G 6.017605e-04 2.750447e-03 Helicobacter_B 5.971256e-04 2.038090e-03 Faecalitalea 5.711255e-04 1.222346e-03 Clostridium_G 5.351194e-04 1.970231e-03 Helicobacter_C 5.226296e-04 2.160895e-03 Thomasclavelia 5.142818e-04 7.308848e-04 Amedibacterium 4.891434e-04 2.468238e-03 Limosilactobacillus 4.728731e-04 1.797457e-03 Romboutsia 4.692510e-04 1.463961e-03 Catenibacterium 4.606070e-04 1.271267e-03 Negativibacillus 4.556881e-04 1.030846e-03 UBA9414 4.053743e-04 8.124246e-04 Mailhella 3.453677e-04 1.015241e-03 Dysosmobacter 3.408519e-04 9.011948e-04 Gallibacter 3.247569e-04 7.467800e-04 Oliverpabstia 3.231635e-04 4.962950e-04 Hathewaya 3.079613e-04 1.086915e-03 Lawsonibacter 3.006862e-04 9.125541e-04 Onthovivens 2.912959e-04 5.753363e-04 Cellulosilyticum 2.671023e-04 1.579720e-03 Bifidobacterium 2.420788e-04 1.807747e-03 Anaerosphaera 2.413738e-04 8.768049e-04 Fimiplasma 2.408513e-04 6.143729e-04 UMGS1370 2.210713e-04 4.205404e-04 Zhenhengia 2.061426e-04 1.157043e-03 Paraclostridium 2.019028e-04 5.515030e-04 RGIG7332 1.716132e-04 6.218848e-04 Pseudoflavonifractor_A 1.669855e-04 2.623799e-04 Rhodoblastus 1.585673e-04 1.207613e-03 Dielma 1.490374e-04 2.938513e-04 Beduini 1.484189e-04 3.120260e-04 CCUG-7971 1.481056e-04 5.489315e-04 Merdivicinus 1.397210e-04 4.985405e-04 Terrisporobacter 1.381169e-04 6.235356e-04 MGBC140090 1.375437e-04 3.689981e-04 Metalachnospira 1.223447e-04 2.462986e-04 Amedibacillus 1.086979e-04 4.740354e-04 Anaerofilum 1.035896e-04 4.184692e-04 Helicobacter_D 1.016273e-04 5.427803e-04 Clostridium_AH 9.867733e-05 6.883540e-04 Pseudoscilispira 9.795886e-05 1.700112e-04 JAGZHZ01 8.792791e-05 3.004922e-04 Evtepia 7.859597e-05 4.704903e-04 RGIG3102 6.956484e-05 3.106027e-04 Enterococcus 6.489543e-05 3.221736e-04 Mycoplasmoides 6.465891e-05 3.399451e-04 Duodenibacillus 6.329115e-05 1.362160e-04 Succinivibrio 5.378879e-05 1.812214e-04 Acetatifactor 5.089177e-05 1.814556e-04 Paenalcaligenes 4.210337e-05 2.455972e-04 Scybalenecus 3.977628e-05 2.255595e-04 Angelakisella 2.914355e-05 1.019388e-04 Scybalocola 2.788638e-05 1.143383e-04 UBA3375 2.708135e-05 9.892183e-05 Merdisoma 2.284156e-05 8.868611e-05 Catellicoccus 1.951115e-05 1.485925e-04 UBA866 9.037031e-06 5.329642e-05 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() #Per region genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~region)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["alpha-diversity.html", "Chapter 7 Alpha diversity 7.1 Mean and standard deviation 7.2 Diversity plots", " Chapter 7 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements genome_counts_filt &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] rownames(genome_counts_filt) &lt;- NULL genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) 7.1 Mean and standard deviation # Merge all metrics alpha_div_meta &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) #By region richness_mean &lt;- alpha_div_meta %&gt;% group_by(region) %&gt;% dplyr::summarise_at(.vars = names(.)[2], .funs = c(&quot;Richness mean&quot; = &quot;mean&quot;, &quot;Richness sd&quot; = &quot;sd&quot;)) neutral_mean &lt;- alpha_div_meta %&gt;% group_by(region) %&gt;% dplyr::summarise_at(.vars = names(.)[3], .funs = c(&quot;Neutral mean&quot; = &quot;mean&quot;, &quot;Neutral sd&quot; = &quot;sd&quot;)) phylogenetic_mean &lt;- alpha_div_meta %&gt;% group_by(region) %&gt;% dplyr::summarise_at(.vars = names(.)[4], .funs = c(&quot;Phylogenetic mean&quot; = &quot;mean&quot;, &quot;Phylogenetic sd&quot; = &quot;sd&quot;)) functional_mean &lt;- alpha_div_meta %&gt;% group_by(region) %&gt;% dplyr::summarise_at(.vars = names(.)[5], .funs = c(&quot;Functional mean&quot; = &quot;mean&quot;, &quot;Functional sd&quot; = &quot;sd&quot;)) cbind(richness_mean, neutral_mean[, 2:3], phylogenetic_mean[, 2:3], functional_mean[, 2:3]) region Richness mean Richness sd Neutral mean Neutral sd Phylogenetic mean Phylogenetic sd Functional mean Functional sd 1 Daneborg 233.1034 48.11545 65.99730 16.29934 5.015232 0.665725 1.412359 0.03958317 2 Ittoqqortoormii 232.1379 44.91478 71.28441 32.76431 5.877811 1.135241 1.465209 0.07448147 7.2 Diversity plots alpha_div_pivot &lt;- richness %&gt;% full_join(neutral,by=join_by(sample==sample)) %&gt;% full_join(phylogenetic,by=join_by(sample==sample)) %&gt;% full_join(functional,by=join_by(sample==sample)) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) alpha_div_pivot %&gt;% ggplot(aes(x=value, y=sample)) + geom_bar(stat=&#39;identity&#39;, fill=&quot;#6c9ebc&quot;) + facet_nested(region ~ data, scales=&quot;free&quot;)+ coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme(strip.background = element_blank(), panel.grid.minor.x = element_line( size=.1, color=&quot;grey&quot; ), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1)) "],["beta-diversity.html", "Chapter 8 Beta diversity", " Chapter 8 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) genome_counts_filt &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] rownames(genome_counts_filt) &lt;- NULL genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) 8.0.1 Permanova #Richness betadisper(beta_q0n$S, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.09234 0.092344 14.312 999 0.001 *** Residuals 56 0.36132 0.006452 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Daneborg Ittoqqortoormii Daneborg 0.001 Ittoqqortoormii 0.00037875 adonis2(beta_q0n$S ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_9nqg4l2f1przv2fshz5g .table td.tinytable_css_g1suimhxn7cex88ujn6u, .table th.tinytable_css_g1suimhxn7cex88ujn6u { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value region 1 1.700798 0.2101443 14.89903 0.001 Residual 56 6.392678 0.7898557 NA NA Total 57 8.093476 1.0000000 NA NA #Neutral diversity betadisper(beta_q1n$S, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.54684 0.54684 36.556 999 0.001 *** Residuals 56 0.83770 0.01496 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Daneborg Ittoqqortoormii Daneborg 0.001 Ittoqqortoormii 1.2786e-07 adonis2(beta_q1n$S ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_t39k93acu80wzkrpdfu5 .table td.tinytable_css_z6kid44bnpsi5i97ygn3, .table th.tinytable_css_z6kid44bnpsi5i97ygn3 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value region 1 2.506002 0.261813 19.86154 0.001 Residual 56 7.065723 0.738187 NA NA Total 57 9.571725 1.000000 NA NA #Phylogenetic diversity betadisper(beta_q1p$S, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.15221 0.15221 13.724 999 0.001 *** Residuals 56 0.62106 0.01109 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Daneborg Ittoqqortoormii Daneborg 0.001 Ittoqqortoormii 0.00048622 adonis2(beta_q1p$S ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_gcqgo79ix09m19b0mip6 .table td.tinytable_css_9bybxnnk62cte8b5bxup, .table th.tinytable_css_9bybxnnk62cte8b5bxup { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value region 1 0.1736353 0.103117 6.438466 0.001 Residual 56 1.5102323 0.896883 NA NA Total 57 1.6838677 1.000000 NA NA #Functional diversity betadisper(beta_q1f$S, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.000358 0.0003577 0.0791 999 0.786 Residuals 56 0.253218 0.0045218 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Daneborg Ittoqqortoormii Daneborg 0.791 Ittoqqortoormii 0.77954 adonis2(beta_q1f$S ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_9f3r1vb649w1yge1wn2o .table td.tinytable_css_qz7t1faatk227et5j2mq, .table th.tinytable_css_qz7t1faatk227et5j2mq { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value region 1 0.03790714 0.08343941 5.097979 0.08 Residual 56 0.41640027 0.91656059 NA NA Total 57 0.45430741 1.00000000 NA NA 8.0.2 Richness diversity plot beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, fill = region)) + scale_color_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 8.0.3 Neutral diversity plot beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, fill = region)) + scale_color_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 8.0.4 Phylogenetic diversity plot beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, fill = region)) + scale_color_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 8.0.5 Functional diversity plot beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, fill = region)) + scale_color_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) "],["differential-abundance-analysis-taxonomic.html", "Chapter 9 Differential abundance analysis: taxonomic 9.1 Structural zeros 9.2 Ancombc2 (considering structural zeros): Mag level 9.3 Ancombc2 (considering structural zeros): Genus level", " Chapter 9 Differential abundance analysis: taxonomic load(&quot;data/data.Rdata&quot;) 9.1 Structural zeros 9.2 Ancombc2 (considering structural zeros): Mag level taxonomy &lt;- data.frame(physeq_genome_filtered@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;) %&gt;% mutate_at(vars(phylum, genus), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;)) ancombc_rand_table &lt;- ancom_rand_output$res %&gt;% dplyr::select(taxon, lfc_regionIttoqqortoormii, p_regionIttoqqortoormii) %&gt;% filter(p_regionIttoqqortoormii &lt; 0.05) %&gt;% dplyr::arrange(p_regionIttoqqortoormii) %&gt;% merge(., taxonomy, by=&quot;taxon&quot;) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate_at(vars(phylum), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;)) %&gt;% right_join(taxonomy, by=join_by(phylum == phylum)) %&gt;% dplyr::select(phylum, colors) %&gt;% mutate(colors = str_c(colors, &quot;80&quot;)) %&gt;% #add 80% alpha unique() %&gt;% dplyr::arrange(phylum) tax_table &lt;- as.data.frame(unique(ancombc_rand_table$phylum)) colnames(tax_table)[1] &lt;- &quot;phylum&quot; tax_color &lt;- merge(tax_table, colors_alphabetic, by=&quot;phylum&quot;)%&gt;% dplyr::arrange(phylum) %&gt;% dplyr::select(colors) %&gt;% pull() ancom_result &lt;- ancom_rand_output$res %&gt;% na.omit() %&gt;% dplyr::rename(genome=taxon) %&gt;% left_join(genome_metadata,by=join_by(genome==genome)) ancom_result %&gt;% mutate(significance = ifelse(p_regionIttoqqortoormii &lt; 0.05, &quot;1&quot;, &quot;0&quot;)) %&gt;% ggplot(., aes(x=-log(p_regionIttoqqortoormii), y=lfc_regionIttoqqortoormii, color=significance)) + geom_point() + scale_color_manual(values = c(&quot;#cccccc&quot;,&quot;#00FFFF&quot;)) + geom_text(aes(3, 5), label = &quot;Enriched\\nin Ittoqqortoormii&quot;, color=&quot;#666666&quot;) + geom_text(aes(3, -5), label = &quot;Enriched\\nin Danenborg&quot;, color=&quot;#666666&quot;) + labs(color=&quot;Significance&quot;, y=&quot;Difference between locations&quot;, x=&quot;p-value&quot;) + theme_classic() 9.3 Ancombc2 (considering structural zeros): Genus level physeq_genome_filtered_test&lt;- physeq_genome_filtered tax &lt;- data.frame(tax_table(physeq_genome_filtered_test)) tax.clean &lt;- data.frame(row.names = row.names(tax), domain = str_replace(tax[,1], &quot;d__&quot;,&quot;&quot;), phylum = str_replace(tax[,2], &quot;D_1__&quot;,&quot;&quot;), class = str_replace(tax[,3], &quot;c__&quot;,&quot;&quot;), order = str_replace(tax[,4], &quot;o__&quot;,&quot;&quot;), family = str_replace(tax[,5], &quot;f__&quot;,&quot;&quot;), genus = str_replace(tax[,6], &quot;g__&quot;,&quot;&quot;), species = str_replace(tax[,7], &quot;s__&quot;,&quot;&quot;), stringsAsFactors = FALSE) tax.clean[is.na(tax.clean)] &lt;- &quot;&quot; for (i in 1:7){ tax.clean[,i] &lt;- as.character(tax.clean[,i])} ####### Fille holes in the tax table tax.clean[is.na(tax.clean)] &lt;- &quot;&quot; for (i in 1:nrow(tax.clean)){ #Fill in missing taxonomy if (tax.clean[i,2] == &quot;&quot;){ domain &lt;- paste(&quot;domain_&quot;, tax.clean[i,1], sep = &quot;&quot;) tax.clean[i, 2:7] &lt;- domain } else if (tax.clean[i,3] == &quot;&quot;){ phylum &lt;- paste(&quot;phylum_&quot;, tax.clean[i,2], sep = &quot;&quot;) tax.clean[i, 3:7] &lt;- phylum } else if (tax.clean[i,4] == &quot;&quot;){ class &lt;- paste(&quot;class_&quot;, tax.clean[i,3], sep = &quot;&quot;) tax.clean[i, 4:7] &lt;- class } else if (tax.clean[i,5] == &quot;&quot;){ order &lt;- paste(&quot;order_&quot;, tax.clean[i,4], sep = &quot;&quot;) tax.clean[i, 5:7] &lt;- order } else if (tax.clean[i,6] == &quot;&quot;){ family &lt;- paste(&quot;family_&quot;, tax.clean[i,5], sep = &quot;&quot;) tax.clean[i, 6:7] &lt;- family } else if (tax.clean[i,7] == &quot;&quot;){ tax.clean$species[i] &lt;- paste(&quot;genus&quot;,tax.clean$genus[i], sep = &quot;_&quot;) } } tax_table(physeq_genome_filtered_test) &lt;- as.matrix(tax.clean) ancom_rand_output_gen = ancombc2(data = physeq_genome_filtered_test, assay_name = &quot;counts&quot;, tax_level = &quot;genus&quot;, #change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;region&quot;, #fixed variable(s) p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut = 0, s0_perc = 0, group = NULL, struc_zero = FALSE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), lme_control = NULL, mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL) taxonomy &lt;- data.frame(physeq_genome_filtered@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;) %&gt;% mutate_at(vars(phylum, genus), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% select(phylum, genus)%&gt;% unique() ancombc_rand_table_gen &lt;- ancom_rand_output_gen$res %&gt;% mutate_at(vars(taxon), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% dplyr::select(taxon, lfc_regionIttoqqortoormii, p_regionIttoqqortoormii) %&gt;% filter(p_regionIttoqqortoormii &lt; 0.05) %&gt;% dplyr::arrange(lfc_regionIttoqqortoormii) %&gt;% left_join(taxonomy, by=join_by(taxon == genus)) %&gt;% dplyr::arrange(lfc_regionIttoqqortoormii) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate_at(vars(phylum), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;)) %&gt;% right_join(taxonomy, by=join_by(phylum == phylum)) %&gt;% dplyr::select(phylum, colors) %&gt;% mutate(colors = str_c(colors, &quot;80&quot;)) %&gt;% #add 80% alpha unique() %&gt;% dplyr::arrange(phylum) tax_table &lt;- as.data.frame(unique(ancombc_rand_table_gen$phylum)) colnames(tax_table)[1] &lt;- &quot;phylum&quot; tax_color &lt;- merge(tax_table, colors_alphabetic, by=&quot;phylum&quot;)%&gt;% dplyr::arrange(phylum) %&gt;% dplyr::select(colors) %&gt;% pull() ancombc_rand_table_gen%&gt;% mutate(taxon=factor(taxon,levels=ancombc_rand_table_gen$taxon)) %&gt;% mutate(Color = ifelse(lfc_regionIttoqqortoormii &lt;0, &quot;Daneborg&quot;,&quot;Ittoqqortoormii&quot;)) %&gt;% ggplot(., aes(x=lfc_regionIttoqqortoormii, y=forcats::fct_rev(taxon), fill=Color)) + #forcats::fct_rev() geom_col() + scale_fill_manual(values=tax_color) + geom_hline(yintercept=0) + # coord_flip()+ theme(panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 14, face = &quot;bold&quot;), legend.text = element_text(size = 12), legend.title = element_text(size = 14, face = &quot;bold&quot;), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;)+ xlab(&quot;log2FoldChange&quot;) + ylab(&quot;Genera&quot;)+ guides(fill=guide_legend(title=&quot;Group&quot;)) "],["differential-abundance-analysis-functional.html", "Chapter 10 Differential abundance analysis: functional 10.1 Wilcoxon 10.2 Ancombc2", " Chapter 10 Differential abundance analysis: functional load(&quot;data/data.Rdata&quot;) List of 11 $ axis.title :List of 11 ..$ family : NULL ..$ face : chr &quot;bold&quot; ..$ colour : NULL ..$ size : num 12 ..$ hjust : NULL ..$ vjust : NULL ..$ angle : NULL ..$ lineheight : NULL ..$ margin : NULL ..$ debug : NULL ..$ inherit.blank: logi FALSE ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; $ axis.title.x :List of 11 ..$ family : NULL ..$ face : NULL ..$ colour : NULL ..$ size : NULL ..$ hjust : NULL ..$ vjust : NULL ..$ angle : NULL ..$ lineheight : NULL ..$ margin : &#39;margin&#39; num [1:4] 20points 0points 0points 0points .. ..- attr(*, &quot;unit&quot;)= int 8 ..$ debug : NULL ..$ inherit.blank: logi FALSE ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; $ axis.title.y :List of 11 ..$ family : NULL ..$ face : NULL ..$ colour : NULL ..$ size : NULL ..$ hjust : NULL ..$ vjust : NULL ..$ angle : NULL ..$ lineheight : NULL ..$ margin : &#39;margin&#39; num [1:4] 0points 20points 0points 0points .. ..- attr(*, &quot;unit&quot;)= int 8 ..$ debug : NULL ..$ inherit.blank: logi FALSE ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; $ axis.text.x :List of 11 ..$ family : NULL ..$ face : NULL ..$ colour : NULL ..$ size : num 6 ..$ hjust : num 1 ..$ vjust : num 0.5 ..$ angle : num 90 ..$ lineheight : NULL ..$ margin : NULL ..$ debug : NULL ..$ inherit.blank: logi FALSE ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; $ axis.text.y :List of 11 ..$ family : NULL ..$ face : NULL ..$ colour : NULL ..$ size : NULL ..$ hjust : NULL ..$ vjust : NULL ..$ angle : NULL ..$ lineheight : NULL ..$ margin : NULL ..$ debug : NULL ..$ inherit.blank: logi FALSE ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; $ panel.background: list() ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; $ strip.background: list() ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; $ strip.text :List of 11 ..$ family : NULL ..$ face : NULL ..$ colour : chr &quot;black&quot; ..$ size : num 10 ..$ hjust : NULL ..$ vjust : NULL ..$ angle : NULL ..$ lineheight : NULL ..$ margin : NULL ..$ debug : NULL ..$ inherit.blank: logi FALSE ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; $ y : chr &quot;Traits&quot; $ x : chr &quot;Samples&quot; $ fill : chr &quot;GIFT&quot; - attr(*, &quot;class&quot;)= chr [1:2] &quot;theme&quot; &quot;gg&quot; - attr(*, &quot;complete&quot;)= logi FALSE - attr(*, &quot;validate&quot;)= logi TRUE 10.1 Wilcoxon 10.1.1 Community elements differences: Elements Daneborg Ittoqqortoormii Function 1 B0103 4.803665e-01 0.5691376000 Nucleic acid biosynthesis_UDP/UTP 2 B0205 3.986630e-01 0.3628119000 Amino acid biosynthesis_Threonine 3 B0207 3.776322e-01 0.4098170000 Amino acid biosynthesis_Methionine 4 B0213 5.541612e-01 0.5034503000 Amino acid biosynthesis_Proline 5 B0219 2.331814e-03 0.0041099320 Amino acid biosynthesis_GABA 6 B0220 8.256612e-02 0.0708564200 Amino acid biosynthesis_Beta-alanine 7 B0221 1.846192e-01 0.2143759000 Amino acid biosynthesis_Ornithine 8 B0307 2.212079e-01 0.2715057000 Amino acid derivative biosynthesis_Spermidine 9 B0702 5.196989e-01 0.4704878000 Vitamin biosynthesis_Riboflavin (B2) 10 B0704 2.289657e-01 0.2619218000 Vitamin biosynthesis_Pantothenate (B5) 11 B0705 2.685152e-01 0.2187839000 Vitamin biosynthesis_Pyridoxal-P (B6) 12 B0708 2.866538e-01 0.3360235000 Vitamin biosynthesis_Cobalamin (B12) 13 B0710 4.007905e-02 0.0475397500 Vitamin biosynthesis_Phylloquinone (K1) 14 B0801 1.539881e-03 0.0021263090 Aromatic compound biosynthesis_Salicylate 15 B0802 3.886593e-01 0.4737292000 Aromatic compound biosynthesis_Gallate 16 B0805 1.164352e-01 0.1026751000 Aromatic compound biosynthesis_Indole-3-acetate 17 B0902 1.030715e-03 0.0001853436 Metallophore biosynthesis_Aerobactin 18 B1012 6.541175e-03 0.0040366720 Antibiotic biosynthesis_Fosfomycin 19 B1028 4.633777e-03 0.0084958210 Antibiotic biosynthesis_Pyocyanin 20 D0102 7.090557e-02 0.0612379700 Lipid degradation_Fatty acid 21 D0103 6.328203e-02 0.0514885300 Lipid degradation_Oleate 22 D0201 1.448753e-01 0.1295450000 Polysaccharide degradation_Cellulose 23 D0203 2.786198e-01 0.2977752000 Polysaccharide degradation_Starch 24 D0205 8.817280e-02 0.0988987600 Polysaccharide degradation_Pectin 25 D0206 2.637350e-01 0.3466158000 Polysaccharide degradation_Alpha galactan 26 D0207 3.824963e-01 0.4391534000 Polysaccharide degradation_Beta-galactan 27 D0211 4.875337e-02 0.0622591200 Polysaccharide degradation_Alpha-mannan 28 D0213 1.573168e-01 0.2121044000 Polysaccharide degradation_Mucin 29 D0302 7.282498e-02 0.1039446400 Sugar degradation_Sucrose 30 D0304 1.320346e-01 0.1580921000 Sugar degradation_D-Arabinose 31 D0305 3.526289e-01 0.3060427000 Sugar degradation_D-Mannose 32 D0306 7.155777e-02 0.0854695200 Sugar degradation_D-Xylose 33 D0307 1.504186e-01 0.1774106000 Sugar degradation_L-Fucose 34 D0309 3.691148e-01 0.4352184000 Sugar degradation_Galactose 35 D0310 2.138309e-01 0.2382948000 Sugar degradation_NeuAc 36 D0501 7.120569e-01 0.7568889000 Amino acid degradation_Serine 37 D0503 1.647386e-02 0.0225366200 Amino acid degradation_Cysteine 38 D0504 8.992973e-02 0.0667828400 Amino acid degradation_Methionine 39 D0509 3.249079e-01 0.3824282000 Amino acid degradation_Arginine 40 D0511 4.687518e-01 0.4222418000 Amino acid degradation_Glutamate 41 D0516 3.849915e-03 0.0034554200 Amino acid degradation_Beta-alanine 42 D0603 2.165105e-03 0.0023180440 Nitrogen compound degradation_Urate 43 D0604 4.308410e-01 0.5173848000 Nitrogen compound degradation_GlcNAc 44 D0608 1.869179e-04 0.0005024345 Nitrogen compound degradation_Betaine 45 D0609 1.259039e-01 0.1087170000 Nitrogen compound degradation_L-carnitine 46 D0613 3.450657e-01 0.3032557000 Nitrogen compound degradation_Taurine 47 D0701 6.462446e-04 0.0090044261 Alcohol degradation_2,3-Butanediol 48 D0704 6.122587e-01 0.5540933000 Alcohol degradation_Glycerol 49 D0705 2.590039e-01 0.2895818000 Alcohol degradation_Propylene glycol 50 D0708 1.296890e-01 0.1121187000 Alcohol degradation_Phytol 51 D0801 2.013642e-05 0.0005815505 Xenobiotic degradation_Toluene 52 D0802 2.013642e-05 0.0005815505 Xenobiotic degradation_Xylene 53 D0805 6.101943e-05 0.0017622740 Xenobiotic degradation_Benzoate 54 D0807 8.328293e-03 0.0134305770 Xenobiotic degradation_Catechol 55 D0817 7.141985e-03 0.0071624840 Xenobiotic degradation_Trans-cinnamate 56 D0902 2.005745e-02 0.0059254260 Antibiotic degradation_Carbapenem 57 D0903 4.717263e-03 0.0057007140 Antibiotic degradation_Cephalosporin 58 D0905 8.576596e-02 0.1601438000 Antibiotic degradation_Streptogramin 59 D0911 1.398233e-01 0.2053753000 Antibiotic degradation_Lincosamide 60 S0101 7.166048e-01 0.6934966000 Cellular structure_Peptidoglycan 61 S0104 1.371278e-01 0.1821940000 Cellular structure_Lipoteichoic acid 62 S0201 1.839605e-01 0.2757946000 Appendages_Flagellum 10.1.2 Community functions differences Code_function Daneborg Ittoqqortoormii Function 1 B03 0.08046173 0.0915978 Amino acid derivative biosynthesis 2 D02 0.19474800 0.2156341 Polysaccharide degradation 3 D07 0.37611120 0.3482431 Alcohol degradation 4 D09 0.14213640 0.1582357 Antibiotic degradation 5 S02 0.07926413 0.1203754 Appendages 10.1.3 Community domains differences No differences 10.2 Ancombc2 10.2.1 Element level ancombc_rand_table &lt;- ancom_rand_output_element$res %&gt;% dplyr::select(taxon, lfc_regionIttoqqortoormii, p_regionIttoqqortoormii) %&gt;% filter(p_regionIttoqqortoormii &lt; 0.05) %&gt;% dplyr::arrange(p_regionIttoqqortoormii) %&gt;% merge(., tax, by=&quot;taxon&quot;) 10.2.2 Functional level ancombc_rand_table_func &lt;- ancom_rand_output_function$res %&gt;% dplyr::select(taxon, lfc_regionIttoqqortoormii, p_regionIttoqqortoormii) %&gt;% filter(p_regionIttoqqortoormii &lt; 0.05) %&gt;% dplyr::arrange(p_regionIttoqqortoormii) %&gt;% merge(., tax, by=&quot;taxon&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
