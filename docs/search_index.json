[["index.html", "AlberdiLab | Sled dogs metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Sled dogs metagenomics Elsa Margaret Krook Brenner1 Ostaizka Aizpurua2 Antton Alberdi3 2024-06-07 Chapter 1 Introduction This webbook contains all the code used for data analysis in study on the recovery of metagenome‑assembled genomes and derived microbial communities from faecal samples of sled dogs collected in Daneborg and Ittoqqortoormii. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/sled_dogs_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) library(janitor) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(matrixStats) University of Copenhagen, elsa.brenner@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Prepare a phyloseq object 2.5 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0032_metadata.tsv&quot;)%&gt;% dplyr::rename(sample=EHI_plaintext) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0032_counts.tsv&quot;) %&gt;% rename(genome=1)%&gt;% select(c(&quot;genome&quot;,sample_metadata$sample)) genomes&lt;-read_counts$genome 2.1.3 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/DMB0032_coverage.tsv&quot;) %&gt;% rename(genome=1) %&gt;% select(c(&quot;genome&quot;,sample_metadata$sample))%&gt;% arrange(match(genome, genomes)) 2.1.4 Genome metadata genome_metadata &lt;- read_tsv(&quot;data/DMB0032_mag_info.tsv&quot;)%&gt;% rename(length=mag_size) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% arrange(match(genome, genomes)) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0032.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/sled_dogs_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3)%&gt;% arrange(match(genome, genomes)) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) genome_counts_filt &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] rownames(genome_counts_filt) &lt;- NULL genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Prepare a phyloseq object phylo_samples &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% sample_data() #convert to phyloseq sample_data object phylo_genome &lt;- genome_counts_filt %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% otu_table(., taxa_are_rows = TRUE) phylo_taxonomy &lt;- genome_metadata %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% as.matrix() %&gt;% tax_table() #convert to phyloseq tax_table object physeq_genome &lt;- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples) physeq_genome_clr &lt;- microbiome::transform(physeq_genome, &#39;clr&#39;) 2.5 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, physeq_genome, physeq_genome_clr, file = &quot;data/data.Rdata&quot;) "],["data-pre-processing.html", "Chapter 3 Data pre-processing 3.1 General data statistics 3.2 General MAG statistics", " Chapter 3 Data pre-processing 3.1 General data statistics Number of samples 58 Number of MAGs: The number of metagenome-assembled genomes (MAG) or draft bacterial genomes reconstructed from the metagenomic data. 555 Amount of total data (GB): The amount of total DNA data sequenced in gigabases (GB, one billion nucleotide bases). 333.71 Amount of discarded data (GB): The amount of data discarded due to low quality or lack of informativeness during data preprocesing. Discarding 5-15% of the produced data is within the expected range, due to formation of adaptor dimers, inclusion of adaptors in sequencing reads due to short insert sizes, low sequencing quality, etc. 10.36577 Amount of discarded data (in % of the raw data) 3.11 Amount of host data (GB): The amount of data mapped against the host genome. The percentage refers to the amount of data mapped to the host genome respect to quality-filtered data. Note that this value can be very variable depending on the biological features of the sample (e.g., anal swabs contain more host DNA than faeces) and the employed reference genome (e.g., the chances for mapping to the genome are lower as the distance between) the study species and the employed reference genome differ). 6.488333 Amount of host data (% of the quality-filtered data) 2.01 Estimated prokaryotic data: The amount and proportion of data belonging to prokayotic genomes respect to the total metagenomic fraction, as estimated from singleM analysis. Note that this is an estimation that relies on the genome sizes of genomes available in reference databases. If a given taxon is not properly represented, genome size estimations can be less accurate. 293.1353 Estimated prokaryotic data (% of the metagenomic data): 293.1353 Amount of metagenomic data (GB): The amount of data mapped against the host genome. The percentage refers to the amount of data mapped to the host genome respect to quality-filtered data. Note that this value can be very variable depending on the biological features of the sample (e.g., anal swabs contain more host DNA than faeces) and the employed reference genome (e.g., the chances for mapping to the genome are lower as the distance between) the study species and the employed reference genome differ). 316.8527 Amount of metagenomic data (% of the quality-filtered data): 97.99 Total mapped sequencing depth (million reads): The amount of reads (and nucleotide bases) that were mapped to the entire MAG catalogue. Note that the amount of bases is only an approximation estimated by multiplying the exact number of mapped reads by 250 bp. 1860.26 Total mapped sequencing depth (GB) 266.02 Average mapped sequencing depth (million reads): This is the average number of reads (and nucleotide bases) mapped to each sample. Note that the amount of bases is only an approximation estimated by multiplying the exact number of mapped reads by 250 bp. 32.07 Average mapped sequencing depth (GB) 4.59 3.2 General MAG statistics Number of MAGs without species-level annotation 244 Percentage of MAGs without species-level annotation 43.96396 Number of phyla 12 "],["sequencing-assessment.html", "Chapter 4 Sequencing Assessment 4.1 DNA fractions 4.2 Estimated vs. mapped prokaryotic fraction", " Chapter 4 Sequencing Assessment 4.1 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases) mags_bases_mean &lt;- sequence_fractions %&gt;% mutate(mags_bases = mags_bases / 1000000000) %&gt;% select(mags_bases) %&gt;% pull() %&gt;% mean() sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(values=c(&quot;#CCCCCC&quot;,&quot;#178a94&quot;,&quot;#ee8080&quot;,&quot;#d03161&quot;)) + facet_wrap(~region, scales=&quot;free_x&quot;)+ geom_hline(yintercept = mags_bases_mean, linetype = &quot;dashed&quot;, color = &quot;black&quot;) + labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 4.2 Estimated vs. mapped prokaryotic fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify 4.2.1 Additional sequencing needed # Define the aimed GBs for host and mapped metagenomic data mags_bases_aim=2 host_bases_aim=5 sequence_fractions_required &lt;- sequence_fractions %&gt;% mutate(mags_bases = round(mags_bases / 1000000000,2)) %&gt;% mutate(unmapped_bases = round(unmapped_bases / 1000000000,2)) %&gt;% mutate(host_bases = round(host_bases / 1000000000,2)) %&gt;% mutate(lowqual_bases = round(lowqual_bases / 1000000000,2)) %&gt;% mutate(total_bases = mags_bases+unmapped_bases+host_bases+lowqual_bases) %&gt;% mutate(mags_bases_fraction = mags_bases/total_bases) %&gt;% mutate(mags_bases_difference = mags_bases_aim - mags_bases) %&gt;% mutate(meta_required = round(mags_bases_difference / mags_bases_fraction,2)) %&gt;% mutate(meta_required = ifelse(meta_required &lt; 0, 0, meta_required)) %&gt;% mutate(host_bases_fraction = host_bases/total_bases) %&gt;% mutate(host_bases_difference = host_bases_aim - host_bases) %&gt;% mutate(host_required = round(host_bases_difference / host_bases_fraction,2)) %&gt;% mutate(host_required = ifelse(host_required &lt; 0, 0, host_required)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases,meta_required,host_required) sequence_fractions_required %&gt;% select(sample,meta_required,host_required) %&gt;% mutate(meta_required = ifelse(meta_required &gt; 20, 21, meta_required)) %&gt;% mutate(host_required = ifelse(host_required &gt; 20, 21, host_required)) %&gt;% pivot_longer(!sample, names_to = &quot;requirement&quot;, values_to = &quot;value&quot;) %&gt;% mutate(requirement = factor(requirement, levels = c(&quot;host_required&quot;,&quot;meta_required&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, fill=requirement, group=requirement)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(values=c(&quot;#178a94&quot;,&quot;#d03161&quot;)) + facet_wrap(~requirement, scales=&quot;free_x&quot;) + labs(x = &quot;Amount of data (GB)&quot;, y = &quot;Samples&quot;) + geom_vline(xintercept = 20, linetype = &quot;dashed&quot;, color = &quot;black&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) "],["mag-catalogue.html", "Chapter 5 MAG catalogue 5.1 Genome phylogeny 5.2 Genome quality 5.3 Functional overview 5.4 Functional ordination", " Chapter 5 MAG catalogue load(&quot;data/data.Rdata&quot;) 5.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 5.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() tinytable_nczfx93h49ki36ksgw3r .table td.tinytable_css_23f128puhvsl2n3xzu7c, .table th.tinytable_css_23f128puhvsl2n3xzu7c { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 78.18±17.34 2.78±2.84 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(70,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(70,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 5.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 5.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 6 Community composition 6.1 Taxonomy overview 6.2 Taxonomy boxplot", " Chapter 6 Community composition load(&quot;data/data.Rdata&quot;) 6.1 Taxonomy overview 6.1.1 Stacked barplot genome_metadata&lt;- genome_metadata%&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors)+ facet_grid(~region, scale=&quot;free&quot;, space=&quot;free&quot;) + guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 6.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_ew4beqx7syaefil1sul7 .table td.tinytable_css_4nm1c39yegp13r6crlhh, .table th.tinytable_css_4nm1c39yegp13r6crlhh { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd Fusobacteriota 0.3663617229 0.136021624 Bacteroidota 0.3034917323 0.111266820 Bacillota_A 0.1494367879 0.072293629 Pseudomonadota 0.0977735470 0.055151857 Bacillota 0.0331239049 0.040190706 Bacillota_C 0.0271325097 0.041839388 Campylobacterota 0.0089299322 0.016614731 Actinomycetota 0.0069779735 0.008750923 Deferribacterota 0.0039464909 0.005804386 Bacillota_B 0.0016437166 0.004243115 Spirochaetota 0.0006735096 0.001927730 Desulfobacterota 0.0005081724 0.001525258 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 6.1.3 Phylum percentages by site Daneborg dogs tinytable_1y059bl4noawy6vcxl8z .table td.tinytable_css_lacw5i0sfp2y706wu9fo, .table th.tinytable_css_lacw5i0sfp2y706wu9fo { border-bottom: solid 0.1em #d3d8dc; } Phylum mean sd Fusobacteriota 39.86040326 9.50276145 Bacteroidota 33.46096983 10.28066834 Bacillota_A 11.71124356 5.59102631 Pseudomonadota 9.77011822 3.32682054 Bacillota 2.07262689 1.05420229 Bacillota_C 1.65309681 0.73666970 Actinomycetota 0.53422369 0.87082467 Deferribacterota 0.43183843 0.45976979 Campylobacterota 0.30217355 0.55610573 Desulfobacterota 0.10163448 0.20496300 Spirochaetota 0.05087026 0.08756671 Bacillota_B 0.05080102 0.10006683 Ittoqqortoormii dogs tinytable_87k35cynzsfuvasbwv5e .table td.tinytable_css_8y2h1bhtx1s7w41oqpx4, .table th.tinytable_css_8y2h1bhtx1s7w41oqpx4 { border-bottom: solid 0.1em #d3d8dc; } Phylum mean sd Fusobacteriota 33.41194132 16.2729562 Bacteroidota 27.23737663 11.2373166 Bacillota_A 18.17611403 7.3137374 Pseudomonadota 9.78459118 7.1311314 Bacillota 4.55215410 5.3467364 Bacillota_C 3.77340513 5.7240774 Campylobacterota 1.48381289 2.1417871 Actinomycetota 0.86137102 0.8632284 Deferribacterota 0.35745975 0.6867294 Bacillota_B 0.27794229 0.5742640 Spirochaetota 0.08383167 0.2596527 6.2 Taxonomy boxplot 6.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_pyiw3fiu8dozz79rp9ra .table td.tinytable_css_meo9p8toujujkgbpf1r4, .table th.tinytable_css_meo9p8toujujkgbpf1r4 { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Fusobacteriaceae 3.663617e-01 0.1360216238 f__Bacteroidaceae 2.973931e-01 0.1131925162 f__Lachnospiraceae 6.831901e-02 0.0505223956 f__Burkholderiaceae_A 4.806831e-02 0.0196480683 f__Succinivibrionaceae 3.552330e-02 0.0361163460 f__Ruminococcaceae 2.705037e-02 0.0196101453 f__Peptostreptococcaceae 2.621345e-02 0.0203006445 f__Acidaminococcaceae 1.546376e-02 0.0071868623 f__Clostridiaceae 1.539613e-02 0.0295281580 f__Enterobacteriaceae 1.395292e-02 0.0401029267 f__Selenomonadaceae 1.166875e-02 0.0421561660 f__Erysipelotrichaceae 9.178545e-03 0.0109172103 f__Anaeroplasmataceae 6.090648e-03 0.0074218634 f__Coriobacteriaceae 6.011618e-03 0.0080478036 f__Lactobacillaceae 5.951066e-03 0.0298173221 f__Helicobacteraceae 5.803308e-03 0.0113002456 f__Mucispirillaceae 3.946491e-03 0.0058043860 f__Oscillospiraceae 3.664318e-03 0.0053396853 f__Turicibacteraceae 3.496100e-03 0.0111830905 f__Campylobacteraceae 3.126624e-03 0.0093571271 f__Coprobacillaceae 2.972458e-03 0.0055273393 f__Muribaculaceae 2.753827e-03 0.0066359854 f__Streptococcaceae 2.290454e-03 0.0077197113 f__CAG-508 2.285805e-03 0.0020219741 f__Enterococcaceae 2.244881e-03 0.0153913547 f__Anaerotignaceae 2.028736e-03 0.0030524632 f__Butyricicoccaceae 1.844323e-03 0.0021125655 f__Peptococcaceae 1.643717e-03 0.0042431146 f__UBA932 1.304836e-03 0.0038121201 f__Tannerellaceae 1.119621e-03 0.0025439141 f__CAG-274 9.414083e-04 0.0015219121 f__Marinifilaceae 9.203578e-04 0.0029931117 f__Brachyspiraceae 6.735096e-04 0.0019277303 f__CAG-826 6.216468e-04 0.0012720412 f__Anaerovoracaceae 5.526548e-04 0.0011437465 f__Eggerthellaceae 5.224363e-04 0.0008857518 f__Desulfovibrionaceae 5.081724e-04 0.0015252576 f__Peptoniphilaceae 4.681118e-04 0.0016902695 f__Bifidobacteriaceae 4.439194e-04 0.0032700701 f__Cellulosilyticaceae 4.144138e-04 0.0017399622 f__Beijerinckiaceae 1.815455e-04 0.0013826090 f__Mycoplasmoidaceae 1.276422e-04 0.0006902477 f__JAAYXM01 1.252571e-04 0.0004581646 f__ 8.847277e-05 0.0003869487 f__UBA3375 8.372673e-05 0.0002904414 f__Catellicoccaceae 6.673736e-05 0.0005082566 f__Burkholderiaceae_C 4.747760e-05 0.0002888266 f__Acutalibacteraceae 4.433113e-05 0.0002541989 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per region family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~region)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 6.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_2zpgeb53nx9um5wq6iz2 .table td.tinytable_css_xyryjc9ve4x11bp6kut5, .table th.tinytable_css_xyryjc9ve4x11bp6kut5 { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Fusobacterium_A 1.717979e-01 9.816809e-02 Phocaeicola 1.633786e-01 7.071086e-02 Fusobacterium_B 1.584751e-01 7.096538e-02 Alloprevotella 4.510262e-02 5.111930e-02 Sutterella 4.199309e-02 1.870638e-02 Mediterranea 3.651435e-02 2.488149e-02 Anaerobiospirillum 3.467102e-02 3.597278e-02 Bacteroides 2.979760e-02 1.616196e-02 Faecalibacterium 2.122649e-02 1.654400e-02 Peptacetobacter 1.961270e-02 1.591090e-02 Blautia 1.780596e-02 1.930155e-02 Phascolarctobacterium_A 1.546376e-02 7.186862e-03 Prevotella 1.441140e-02 3.214202e-02 Escherichia 1.365996e-02 3.991853e-02 Megamonas 1.166875e-02 4.215617e-02 Faecalimonas 1.019823e-02 1.584840e-02 Sarcina 9.177124e-03 2.107934e-02 Blautia_A 8.640935e-03 7.338491e-03 Paraprevotella 7.600772e-03 1.567049e-02 Ruminococcus_B 7.140240e-03 1.169737e-02 CALUXS01 6.090648e-03 7.421863e-03 Collinsella 6.011618e-03 8.047804e-03 Eisenbergiella 6.000636e-03 5.665431e-03 Schaedlerella 5.689622e-03 7.173958e-03 Aphodousia 5.602216e-03 5.889228e-03 Peptostreptococcus 4.022476e-03 1.301728e-02 Allobaculum 3.729700e-03 3.752479e-03 Turicibacter 3.496100e-03 1.118309e-02 Cetobacterium_A 3.421893e-03 1.764385e-02 Ligilactobacillus 3.334587e-03 1.801788e-02 Campylobacter_D 3.126624e-03 9.357127e-03 Clostridium 3.026090e-03 6.730894e-03 Mucispirillum 2.978653e-03 5.517462e-03 Limisoma 2.753827e-03 6.635985e-03 Faecousia 2.637273e-03 4.060837e-03 Avimicrobium 2.503860e-03 2.344204e-03 Enterococcus_B 2.171357e-03 1.539372e-02 Fournierella 2.170025e-03 2.069538e-03 Helicobacter_A 2.168108e-03 7.080641e-03 Lactobacillus 2.107807e-03 1.031698e-02 Helicobacter_G 1.996833e-03 9.063015e-03 Ventrimonas 1.931520e-03 2.963800e-03 Lachnospira 1.875220e-03 4.241014e-03 Enterocloster 1.851708e-03 1.957803e-03 Butyricicoccus 1.844323e-03 2.112565e-03 Streptococcus 1.681189e-03 7.369580e-03 UMGS1590 1.643717e-03 4.243115e-03 Merdicola 1.589782e-03 1.114922e-03 JAHHTG01 1.420336e-03 7.838952e-03 Cryptobacteroides 1.304836e-03 3.812120e-03 Anaerotignum 1.252553e-03 1.964794e-03 Mediterraneibacter 1.232300e-03 6.915086e-03 Parabacteroides 1.119621e-03 2.543914e-03 Faecalibacillus 1.062936e-03 5.329853e-03 Holdemanella 9.950546e-04 2.092863e-03 CALVGN01 9.893358e-04 1.439612e-03 Clostridium_Q 9.645699e-04 1.827770e-03 Odoribacter 9.203578e-04 2.993112e-03 Clostridium_H 9.149621e-04 2.869388e-03 Clostridium_J 9.070087e-04 2.879388e-03 Helicobacter_C 8.779979e-04 3.338818e-03 Roseburia 8.764896e-04 3.399869e-03 Hungatella_A 8.718369e-04 1.940106e-03 Amedibacterium 8.709000e-04 4.384047e-03 Gallispira 8.122097e-04 1.377777e-03 Anaerobiospirillum_A 7.850619e-04 1.690167e-03 GCA-900066495 7.626101e-04 2.566438e-03 Copromonas 7.534693e-04 1.440772e-03 CAJMNU01 7.334341e-04 1.047209e-03 Negativibacillus 7.228149e-04 1.563832e-03 CAG-269 6.960231e-04 1.872399e-03 Faecalitalea 6.890936e-04 1.421625e-03 Brachyspira 6.735096e-04 1.927730e-03 Helicobacter_B 6.613746e-04 2.219386e-03 Fimicola 6.261776e-04 2.448396e-03 Onthovivens 6.216468e-04 1.272041e-03 Lactococcus 6.092653e-04 2.670389e-03 Dwaynesavagella 5.973489e-04 2.406470e-03 Romboutsia 5.899953e-04 1.971664e-03 Avilachnospira 5.891252e-04 1.336502e-03 Phocaeicola_A 5.877376e-04 1.508366e-03 Gallibacter 5.526548e-04 1.143747e-03 Clostridium_G 5.265080e-04 1.922810e-03 Thomasclavelia 5.243206e-04 7.708176e-04 Catenibacterium 5.232710e-04 1.436336e-03 Slackia_A 5.224363e-04 8.857518e-04 Limosilactobacillus 5.086724e-04 1.882237e-03 Mailhella 5.081724e-04 1.525258e-03 Fimiplasma 4.808492e-04 1.238112e-03 Anaerosphaera 4.681118e-04 1.690270e-03 Bifidobacterium 4.439194e-04 3.270070e-03 Dysosmobacter 4.111732e-04 9.687459e-04 Oliverpabstia 3.836669e-04 5.238535e-04 Paraclostridium 3.811164e-04 1.012270e-03 Parasutterella 3.695571e-04 2.814463e-03 Romboutsia_C 3.675859e-04 2.251512e-03 UBA9414 3.024223e-04 5.724971e-04 Klebsiella 2.929593e-04 1.574562e-03 Amedibacillus 2.597565e-04 1.203178e-03 Terrisporobacter 2.530260e-04 1.078568e-03 MGBC140090 2.530092e-04 6.302546e-04 UMGS1370 2.472629e-04 4.566485e-04 Zhenhengia 2.311744e-04 1.368096e-03 Dielma 2.243685e-04 4.384118e-04 CCUG-7971 2.239356e-04 8.642412e-04 Lawsonibacter 2.229983e-04 6.420821e-04 Pseudoflavonifractor_A 1.988031e-04 3.210845e-04 Cellulosilyticum 1.832394e-04 1.114445e-03 Rhodoblastus 1.815455e-04 1.382609e-03 Hathewaya 1.754062e-04 6.154773e-04 Metalachnospira 1.500057e-04 2.916143e-04 Pseudoscilispira 1.399742e-04 2.488383e-04 Beduini 1.280716e-04 2.691526e-04 Mycoplasmoides 1.276422e-04 6.902477e-04 RGIG7332 1.252571e-04 4.581646e-04 Merdivicinus 1.182461e-04 4.220816e-04 Anaerofilum 1.153185e-04 4.683465e-04 Duodenibacillus 1.034486e-04 2.178367e-04 Helicobacter_D 9.899513e-05 5.412740e-04 JAGZHZ01 8.440962e-05 2.791793e-04 UBA3375 8.372673e-05 2.904414e-04 RGIG3102 7.504570e-05 3.295910e-04 Angelakisella 7.436527e-05 2.555538e-04 Enterococcus 7.352338e-05 3.798820e-04 Clostridium_AH 7.168151e-05 4.955652e-04 Acetatifactor 7.039992e-05 2.468687e-04 Succinivibrio 6.721576e-05 2.247326e-04 Catellicoccus 6.673736e-05 5.082566e-04 Evtepia 5.409691e-05 3.186964e-04 Paenalcaligenes 4.747760e-05 2.888266e-04 Scybalenecus 4.433113e-05 2.541989e-04 UBA866 4.420840e-05 2.517765e-04 Scybalocola 3.695431e-05 1.459453e-04 Merdisoma 2.318332e-05 9.000681e-05 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() #Per region genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~region)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["alpha-diversity.html", "Chapter 7 Alpha diversity 7.1 Mean and standard deviation 7.2 Diversity plots", " Chapter 7 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements genome_counts_filt &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] rownames(genome_counts_filt) &lt;- NULL genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) 7.1 Mean and standard deviation # Merge all metrics alpha_div_meta &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #By region richness_mean &lt;- alpha_div_meta %&gt;% group_by(region) %&gt;% dplyr::summarise_at(.vars = names(.)[2], .funs = c(&quot;Richness mean&quot; = &quot;mean&quot;, &quot;Richness sd&quot; = &quot;sd&quot;)) neutral_mean &lt;- alpha_div_meta %&gt;% group_by(region) %&gt;% dplyr::summarise_at(.vars = names(.)[3], .funs = c(&quot;Neutral mean&quot; = &quot;mean&quot;, &quot;Neutral sd&quot; = &quot;sd&quot;)) phylogenetic_mean &lt;- alpha_div_meta %&gt;% group_by(region) %&gt;% dplyr::summarise_at(.vars = names(.)[4], .funs = c(&quot;Phylogenetic mean&quot; = &quot;mean&quot;, &quot;Phylogenetic sd&quot; = &quot;sd&quot;)) functional_mean &lt;- alpha_div_meta %&gt;% group_by(region) %&gt;% dplyr::summarise_at(.vars = names(.)[5], .funs = c(&quot;Functional mean&quot; = &quot;mean&quot;, &quot;Functional sd&quot; = &quot;sd&quot;)) cbind(richness_mean, neutral_mean[, 2:3], phylogenetic_mean[, 2:3], functional_mean[, 2:3]) region Richness mean Richness sd Neutral mean Neutral sd Phylogenetic mean Phylogenetic sd Functional mean Functional sd 1 Daneborg 233.1034 48.11545 102.84591 20.95206 5.128847 0.8119508 1.422657 0.03393371 2 Ittoqqortoormii 232.1379 44.91478 96.60722 37.60637 5.935717 1.3816255 1.452623 0.05821893 7.2 Diversity plots alpha_div_pivot &lt;- richness %&gt;% full_join(neutral,by=join_by(sample==sample)) %&gt;% full_join(phylogenetic,by=join_by(sample==sample)) %&gt;% full_join(functional,by=join_by(sample==sample)) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) alpha_div_pivot %&gt;% ggplot(aes(x=value, y=sample)) + geom_bar(stat=&#39;identity&#39;, fill=&quot;#6c9ebc&quot;) + facet_nested(region ~ data, scales=&quot;free&quot;)+ coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme(strip.background = element_blank(), panel.grid.minor.x = element_line( size=.1, color=&quot;grey&quot; ), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1)) "],["beta-diversity.html", "Chapter 8 Beta diversity 8.1 Permanova 8.2 Plot", " Chapter 8 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) genome_counts_filt &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] rownames(genome_counts_filt) &lt;- NULL genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) 8.1 Permanova #Richness betadisper(beta_q0n$S, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.09234 0.092344 14.312 999 0.001 *** Residuals 56 0.36132 0.006452 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Daneborg Ittoqqortoormii Daneborg 0.001 Ittoqqortoormii 0.00037875 adonis2(beta_q0n$S ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_w3naam8l0g4kwhl0jbuc .table td.tinytable_css_9ebv0iq4w4yyrxrllpq8, .table th.tinytable_css_9ebv0iq4w4yyrxrllpq8 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value region 1 1.700798 0.2101443 14.89903 0.001 Residual 56 6.392678 0.7898557 NA NA Total 57 8.093476 1.0000000 NA NA #Neutral diversity betadisper(beta_q1n$S, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.39850 0.39850 26.96 999 0.001 *** Residuals 56 0.82775 0.01478 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Daneborg Ittoqqortoormii Daneborg 0.001 Ittoqqortoormii 2.9964e-06 adonis2(beta_q1n$S ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_5v9x7py4dufh29pjo842 .table td.tinytable_css_qsao4eq5mjfwmxmbhj94, .table th.tinytable_css_qsao4eq5mjfwmxmbhj94 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value region 1 2.376111 0.2881769 22.67123 0.001 Residual 56 5.869211 0.7118231 NA NA Total 57 8.245323 1.0000000 NA NA #Phylogenetic diversity betadisper(beta_q1p$S, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.10517 0.105171 12.067 999 0.001 *** Residuals 56 0.48808 0.008716 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Daneborg Ittoqqortoormii Daneborg 0.002 Ittoqqortoormii 0.00099752 adonis2(beta_q1p$S ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_cu9ouyop6wizsg7srdqf .table td.tinytable_css_qgra4p1qwvwr7bkj1tev, .table th.tinytable_css_qgra4p1qwvwr7bkj1tev { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value region 1 0.1387067 0.101621 6.334495 0.001 Residual 56 1.2262339 0.898379 NA NA Total 57 1.3649405 1.000000 NA NA #Functional diversity betadisper(beta_q1f$S, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.003452 0.0034517 0.8969 999 0.353 Residuals 56 0.215512 0.0038484 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Daneborg Ittoqqortoormii Daneborg 0.355 Ittoqqortoormii 0.34768 adonis2(beta_q1f$S ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_ch63d6uhtyo5600panu4 .table td.tinytable_css_ymaglnu9k5tlfxweyvff, .table th.tinytable_css_ymaglnu9k5tlfxweyvff { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value region 1 0.01958829 0.05063651 2.98689 0.177 Residual 56 0.36725289 0.94936349 NA NA Total 57 0.38684118 1.00000000 NA NA 8.2 Plot 8.2.1 Richness diversity beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, fill = region)) + scale_color_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 8.2.2 Neutral diversity beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, fill = region)) + scale_color_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 8.2.3 Phylogenetic diversity beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, fill = region)) + scale_color_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 8.2.4 Functional diversity beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, fill = region)) + scale_color_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Region&quot;, values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) "],["differential-abundance-analysis-taxonomic.html", "Chapter 9 Differential abundance analysis: taxonomic 9.1 Structural zeros 9.2 Ancombc2 (considering structural zeros): Mag level 9.3 Ancombc2 (considering structural zeros): Genus level", " Chapter 9 Differential abundance analysis: taxonomic 9.1 Structural zeros 9.2 Ancombc2 (considering structural zeros): Mag level ancom_result &lt;- ancom_rand_output$res %&gt;% na.omit() %&gt;% dplyr::rename(genome=taxon) %&gt;% left_join(genome_metadata,by=join_by(genome==genome)) ancom_result %&gt;% mutate(significance = ifelse(p_regionIttoqqortoormii &lt; 0.05, &quot;1&quot;, &quot;0&quot;)) %&gt;% ggplot(., aes(x=-log(p_regionIttoqqortoormii), y=lfc_regionIttoqqortoormii, color=significance)) + geom_point() + scale_color_manual(values = c(&quot;#cccccc&quot;,&quot;#00FFFF&quot;)) + geom_text(aes(3, 5), label = &quot;Enriched\\nin Ittoqqortoormii&quot;, color=&quot;#666666&quot;) + geom_text(aes(3, -5), label = &quot;Enriched\\nin Danenborg&quot;, color=&quot;#666666&quot;) + labs(color=&quot;Significance&quot;, y=&quot;Difference between locations&quot;, x=&quot;p-value&quot;) + theme_classic() 9.3 Ancombc2 (considering structural zeros): Genus level "],["differential-abundance-analysis-functional.html", "Chapter 10 Differential abundance analysis: functional 10.1 Wilcoxon 10.2 ANCOM-BC2", " Chapter 10 Differential abundance analysis: functional 10.1 Wilcoxon 10.1.1 Community elements differences: Elements Daneborg Ittoqqortoormii Function 1 B0103 6.935250e-01 0.7450205000 Nucleic acid biosynthesis_UDP/UTP 2 B0105 6.010305e-01 0.6455932000 Nucleic acid biosynthesis_ADP/ATP 3 B0106 6.083095e-01 0.6502715000 Nucleic acid biosynthesis_GDP/GTP 4 B0204 2.575210e-01 0.3192127000 Amino acid biosynthesis_Serine 5 B0213 5.549546e-01 0.5372796000 Amino acid biosynthesis_Proline 6 B0214 1.485393e-01 0.2152364000 Amino acid biosynthesis_Glutamate 7 B0216 1.542694e-01 0.1358790000 Amino acid biosynthesis_Tryptophan 8 B0220 7.186800e-02 0.0981409800 Amino acid biosynthesis_Beta-alanine 9 B0302 3.655858e-03 0.0192885740 Amino acid derivative biosynthesis_Betaine 10 B0307 2.506668e-01 0.2872319000 Amino acid derivative biosynthesis_Spermidine 11 B0309 1.399644e-02 0.0178045000 Amino acid derivative biosynthesis_Putrescine 12 B0310 2.960911e-02 0.0550818600 Amino acid derivative biosynthesis_Tryptamine 13 B0401 6.092043e-01 0.6403524000 SCFA biosynthesis_Acetate 14 B0402 4.026827e-01 0.4602343000 SCFA biosynthesis_Butyrate 15 B0604 5.237257e-01 0.5833668000 Organic anion biosynthesis_L-lactate 16 B0605 2.158774e-01 0.2709147000 Organic anion biosynthesis_D-lactate 17 B0705 3.186111e-01 0.3803295000 Vitamin biosynthesis_Pyridoxal-P (B6) 18 B0708 3.923998e-01 0.4292006000 Vitamin biosynthesis_Cobalamin (B12) 19 B0801 3.233331e-03 0.0124181840 Aromatic compound biosynthesis_Salicylate 20 B0901 3.269081e-04 0.0016810465 Metallophore biosynthesis_Staphyloferrin 21 B0903 3.377793e-03 0.0072562480 Metallophore biosynthesis_Staphylopine 22 D0101 3.734807e-03 0.0109592950 Lipid degradation_Triglyceride 23 D0104 8.426159e-02 0.1053807400 Lipid degradation_Dicarboxylic acids 24 D0203 3.903973e-01 0.3664078000 Polysaccharide degradation_Starch 25 D0205 1.210154e-01 0.1088110000 Polysaccharide degradation_Pectin 26 D0206 4.609870e-01 0.4053977000 Polysaccharide degradation_Alpha galactan 27 D0209 2.683666e-01 0.2355968000 Polysaccharide degradation_Xylans 28 D0212 2.671519e-01 0.2165644000 Polysaccharide degradation_Arabinan 29 D0213 2.721745e-01 0.2462994000 Polysaccharide degradation_Mucin 30 D0302 7.862159e-02 0.1040188800 Sugar degradation_Sucrose 31 D0305 2.244434e-01 0.3042908000 Sugar degradation_D-Mannose 32 D0501 8.475998e-01 0.8179996000 Amino acid degradation_Serine 33 D0502 3.357800e-01 0.4092489000 Amino acid degradation_Threonine 34 D0503 4.495644e-03 0.0268560960 Amino acid degradation_Cysteine 35 D0505 1.837343e-01 0.2251391000 Amino acid degradation_Valine 36 D0507 1.266100e-01 0.1371543000 Amino acid degradation_Leucine 37 D0508 1.634020e-02 0.0375188000 Amino acid degradation_Lysine 38 D0510 1.354174e-02 0.0326313300 Amino acid degradation_Proline 39 D0511 5.066940e-01 0.5637296000 Amino acid degradation_Glutamate 40 D0512 1.451555e-01 0.1974073000 Amino acid degradation_Histidine 41 D0513 2.229188e-02 0.0519274300 Amino acid degradation_Tryptophan 42 D0518 3.597828e-02 0.0659609400 Amino acid degradation_GABA 43 D0601 2.031479e-02 0.0446095400 Nitrogen compound degradation_Nitrate 44 D0603 7.236175e-03 0.0038777150 Nitrogen compound degradation_Urate 45 D0604 5.745150e-01 0.6269044000 Nitrogen compound degradation_GlcNAc 46 D0606 1.041552e-02 0.0359671200 Nitrogen compound degradation_Allantoin 47 D0607 3.607484e-02 0.0234757100 Nitrogen compound degradation_Creatinine 48 D0609 7.629635e-02 0.1004255200 Nitrogen compound degradation_L-carnitine 49 D0611 3.730326e-04 0.0122557564 Nitrogen compound degradation_Phenylethylamine 50 D0613 6.266472e-01 0.5637782000 Nitrogen compound degradation_Taurine 51 D0701 5.990063e-04 0.0060930010 Alcohol degradation_2,3-Butanediol 52 D0702 1.202748e-01 0.1866073000 Alcohol degradation_Ethanol 53 D0704 4.635705e-01 0.5041549000 Alcohol degradation_Glycerol 54 D0705 2.130459e-01 0.2356567000 Alcohol degradation_Propylene glycol 55 D0706 2.361974e-01 0.1972844000 Alcohol degradation_Ethylene glycol 56 D0801 7.057422e-06 0.0001986727 Xenobiotic degradation_Toluene 57 D0802 7.057422e-06 0.0001986727 Xenobiotic degradation_Xylene 58 D0805 2.138613e-05 0.0006020386 Xenobiotic degradation_Benzoate 59 D0807 4.153396e-03 0.0173142390 Xenobiotic degradation_Catechol 60 D0816 5.706260e-02 0.0708180800 Xenobiotic degradation_Phenylacetate 61 D0817 4.415804e-03 0.0188852290 Xenobiotic degradation_Trans-cinnamate 62 D0901 1.818927e-01 0.2930419000 Antibiotic degradation_Penicillin 63 D0903 3.796678e-03 0.0224922690 Antibiotic degradation_Cephalosporin 64 D0905 3.189864e-02 0.0547540400 Antibiotic degradation_Streptogramin 65 D0908 1.476216e-01 0.1908741000 Antibiotic degradation_Macrolide 66 D0910 2.053150e-01 0.1708522000 Antibiotic degradation_Chloramphenicol 67 D0911 1.789748e-01 0.2209285000 Antibiotic degradation_Lincosamide 68 S0101 7.258800e-01 0.7607687000 Cellular structure_Peptidoglycan 69 S0103 2.053722e-01 0.2399655000 Cellular structure_Teichoic acid 70 S0104 1.410837e-01 0.1903607000 Cellular structure_Lipoteichoic acid 71 S0105 5.839626e-01 0.5213209000 Cellular structure_Lipopolysaccharide 72 S0202 7.354700e-03 0.0284999100 Appendages_Pilus 73 S0301 8.562811e-02 0.1276829300 Spore_Spore 10.1.2 Community functions differences Code_function Daneborg Ittoqqortoormii Function 1 B03 0.077318700 0.09438063 Amino acid derivative biosynthesis 2 B04 0.477740800 0.51287920 SCFA biosynthesis 3 B09 0.001518232 0.00353423 Metallophore biosynthesis 4 D01 0.044853630 0.05533753 Lipid degradation 5 D05 0.219459100 0.24800010 Amino acid degradation 6 D07 0.260310300 0.28976050 Alcohol degradation 7 D08 0.007761016 0.01401465 Xenobiotic degradation 8 D09 0.127794600 0.15672580 Antibiotic degradation 9 S03 0.085628110 0.12768293 Spore 10.1.3 Community domains differences No differences 10.2 ANCOM-BC2 10.2.1 Element level 10.2.2 Functional level "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
